#!/bin/bash

# git-branch-status
#   * originally                            by http://github.com/jehiah
#   * "s'all good!" message                 by http://github.com/kd35a
#   * ANSI colors                           by http://github.com/knovoselic
#   * column formatting, filters, and usage by http://github.com/bill-auger

# this script prints out pretty git branch sync status reports

# TODO: add HEAD dates
# TODO: add * to current branch


read -r -d '' USAGE <<-'USAGE'
usage: git-branch-status
       git-branch-status [-a | --all]
       git-branch-status [-b | --branch [branch-name]] [branch-name]
       git-branch-status [-h | --help]

    examples:

    # show only branches for which upstream HEAD differs from local
    $ git-branch-status
      | collab-branch  | (behind 1) | (ahead 2) | origin/collab-branch  |
      | feature-branch | (behind 0) | (ahead 2) | origin/feature-branch |
      | master         | (behind 1) | (ahead 0) | origin/master         |

    # show all branches - even those with no upstream and those up-to-date
    $ git-branch-status -a
    $ git-branch-status --all
      | local-branch   | n/a        | n/a       | n/a                   |
      | master         | (behind 1) | (ahead 0) | origin/master         |
      | tracked-branch | (even)     | (even)    | origin/tracked-branch |

    # show the current branch
    $ git-branch-status -b
    $ git-branch-status --branch
      | current-branch  | (behind 0) | (ahead 2) | origin/current-branch |

    # show a specific branch
    $ git-branch-status          specific-branch
    $ git-branch-status -b       specific-branch
    $ git-branch-status --branch specific-branch
      | specific-branch  | (behind 0) | (ahead 2) | origin/specific-branch |

    # print this usage message
    $ git-branch-status -h
    $ git-branch-status --help
        prints this usage message
USAGE


### helpers ###

function get_refs
{
  echo "`git for-each-ref --format="%(refname:short) %(upstream:short)" refs/heads 2> /dev/null`"
}

function get_status
{
  git rev-list --left-right ${local}...${remote} -- 2>/dev/null
}

function current_branch() { echo $(git rev-parse --abbrev-ref HEAD) ; }

function set_filter_or_die
{
  if [ "$(current_branch)" == "$1" ] || [ $(git branch | grep -G "^  $1$") ] ; then
    branch=$1
  else echo "no such branch: '$1'" ; exit ;
  fi
}


### switches ###

if [ $1 ] ; then
  if   [ "$1" == "-a" -o "$1" == "--all"    ] ; then readonly SHOW_ALL=1 ;
  elif [ "$1" == "-b" -o "$1" == "--branch" ] ; then
    if [ $2 ] ; then set_filter_or_die $2 ; else branch=$(current_branch) ; fi ;
  elif [ "$1" == "-h" -o "$1" == "--help"   ] ; then echo "$USAGE" ; exit ;
  else set_filter_or_die  $1
  fi
fi


### constants ###

readonly SHOW_ALL_LOCAL=$(($SHOW_ALL  + 0)) # also show branches that have no upstream
readonly SHOW_ALL_REMOTE=$(($SHOW_ALL + 0)) # also show branches that are up to date
readonly MAX_COL_W=25
readonly CGREEN='\033[0;32m'
readonly CYELLOW='\033[1;33m'
readonly CRED='\033[0;31m'
readonly CEND='\033[0m'
readonly SPACER="|"
readonly CAHEAD=$CYELLOW
readonly CBEHIND=$CRED
readonly CEVEN=$CGREEN
readonly NO_RESULTS_MSG="${CEVEN}Everything is synchronized.$CEND"


### variables ###

n_total_differences=0
local_col_w=0
behind_col_w=0
ahead_col_w=0
remote_col_w=0
declare -a local_msgs=()
declare -a behind_msgs=()
declare -a ahead_msgs=()
declare -a remote_msgs=()
declare -a behind_colors=()
declare -a ahead_colors=()


# loop over all branches
while read local remote
do
  # filter branches by name
  [ $branch ] && [ "$branch" != "$local" ] && continue

  # parse local<->remote sync status
  if [ $remote ] ; then
    status=$(get_status)
    [ $(($?)) -eq 0 ] || continue

    n_behind=$(echo $status | tr " " "\n" | grep -c '^>')
    n_ahead=$( echo $status | tr " " "\n" | grep -c '^<')
    n_differences=$(($n_behind + $n_ahead))
    n_total_differences=$(($n_total_differences + $n_differences))

    # filter branches by status
    [ "$SHOW_ALL_REMOTE" -eq 0 -a "$n_differences" -eq 0 ] && continue

    # color output
    if [ "$n_behind" -ne 0 ] ; then behind_color=$CBEHIND ; else behind_color=$CEVEN ; fi ;
    if [ "$n_ahead"  -ne 0 ] ; then ahead_color=$CAHEAD ;   else ahead_color=$CEVEN ;  fi ;
  elif [ "$SHOW_ALL_LOCAL" -eq 1 ] ; then
    # dummy data for locals
    n_behind="X" ; n_ahead="X" ; remote="n/a" ; behind_color="$CEVEN" ; ahead_color="$CEVEN"
  else continue
  fi

  # populate lists
  local=${local:0:$MAX_COL_W} ; remote=${remote:0:$MAX_COL_W} ;
  local_msgs=(    ${local_msgs[@]}    "$local"        )
  behind_msgs=(   ${behind_msgs[@]}   "$n_behind"     )
  ahead_msgs=(    ${ahead_msgs[@]}    "$n_ahead"      )
  remote_msgs=(   ${remote_msgs[@]}   "$remote"       )
  behind_colors=( ${behind_colors[@]} "$behind_color" )
  ahead_colors=(  ${ahead_colors[@]}  "$ahead_color"  )

  # determine max column widths
  if [ ${#local}    -gt $local_col_w ] ;  then local_col_w=${#local} ;     fi ;
  if [ ${#n_behind} -gt $behind_col_w ] ; then behind_col_w=${#n_behind} ; fi ;
  if [ ${#n_ahead}  -gt $ahead_col_w ] ;  then ahead_col_w=${#n_ahead} ;   fi ;
  if [ ${#remote}   -gt $remote_col_w ] ; then remote_col_w=${#remote} ;   fi ;

done < <(get_refs)

# compensate width for "(behind )" and "(ahead )" to be appended
behind_col_w=$(( $behind_col_w + 9 ))
ahead_col_w=$((  $ahead_col_w  + 8 ))

# pretty print results
for (( result_n = 0 ; result_n < ${#local_msgs[@]} ; result_n++ ))
do
  # fetch and filter data
  local_msg="${local_msgs[$result_n]}"
  behind_msg="(behind ${behind_msgs[$result_n]})"
  ahead_msg="(ahead ${ahead_msgs[$result_n]})"
  remote_msg="${remote_msgs[$result_n]}"
  behind_color="${behind_colors[$result_n]}"
  ahead_color="${ahead_colors[$result_n]}"
  if [ "$remote_msg" == "n/a"        ] ; then ahead_msg="n/a" ;  ahead_color="" ;  fi ;
  if [ "$remote_msg" == "n/a"        ] ; then behind_msg="n/a" ; behind_color="" ; fi ;
  if [ "$behind_msg" == "(0 behind)" ] ; then behind_msg="(even)" ;                fi ;
  if [ "$ahead_msg"  == "(0 ahead)"  ] ; then ahead_msg="(even)" ;                 fi ;

  # calculate column offsets
  local_col_offset=1
  behind_col_offset=$(( $local_col_w  - ${#local_msg}  ))
  ahead_col_offset=$((  $behind_col_w - ${#behind_msg}  ))
  remote_col_offset=$(( $ahead_col_w  - ${#ahead_msg} ))
  end_col_offset=$((    $remote_col_w - ${#remote_msg} ))

  # build output messages and print
  local_msg="%$(($local_col_offset))s $(  echo -e $SPACER $local_msg)"
  behind_msg="%$(($behind_col_offset))s $(echo -e $SPACER $behind_color$behind_msg$CEND)"
  ahead_msg="%$(($ahead_col_offset))s $(  echo -e $SPACER $ahead_color$ahead_msg$CEND)"
  remote_msg="%$(($remote_col_offset))s $(echo -e $SPACER $remote_msg)"
  end_msg="%$(($end_col_offset))s $SPACER"

  printf "$local_msg$behind_msg$ahead_msg$remote_msg$end_msg\n"
done

# print something if no diffs (and some branches exist in this dir)
if [ "$n_total_differences" == 0 -a "$(get_refs)" ]
then echo -e $NO_RESULTS_MSG
fi
